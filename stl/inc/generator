// generator standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _GENERATOR_
#define _GENERATOR_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR

#if !_HAS_CXX23 || !defined(__cpp_lib_byte) || !defined(__cpp_impl_coroutine)
#pragma message("The contents of <generator> are available only in c++latest mode with coroutine and std::byte support")
#else // ^^^ no coroutine support / coroutines vvv

#include <coroutine>
#include <ranges>
#include <xmemory>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_STD_BEGIN

struct alignas(__STDCPP_DEFAULT_NEW_ALIGNMENT__) _Aligned_block {};

template <class _Ty, class _Ref = const _Ty&, class _Alloc = void>
class generator {
    struct _Iterator;

public:
    class promise_type {
        add_pointer_t<_Ref> _Ptr = nullptr;

        friend _Iterator;

    public:
        generator get_return_object() noexcept {
            return generator(coroutine_handle<promise_type>::from_promise(*this));
        }

        suspend_always initial_suspend() noexcept {
            return {};
        }

        suspend_always final_suspend() noexcept {
            return {};
        }

        suspend_always yield_value(_Ref&& _Val) noexcept {
            _Ptr = _STD addressof(_Val);
            return {};
        }

        void await_transform() = delete; // TODO

        void return_void() noexcept {}

#ifndef _KERNEL_MODE
#ifdef _CPPUNWIND
        void unhandled_exception() {
            throw;
        }
#else // ^^^ defined(_CPPUNWIND) / !defined(_CPPUNWIND) vvv
        void unhandled_exception() noexcept {}
#endif // _CPPUNWIND
#endif // _KERNEL_MODE

        // clang-format off
        static void* operator new(size_t _Size) requires (is_void_v<_Alloc> || default_initializable<_Alloc>) {
            // clang-format on
            if constexpr (is_void_v<_Alloc>) {
                // type-erase new/delete
                void* const _Ptr                      = ::operator new[](_Size + sizeof(void (*)(void*)));
                void (*const _Dealloc)(void*, size_t) = [](void* _Block, size_t _Size) {
                    ::operator delete[](_Block, _Size + sizeof(void (*)(void*)));
                };
                _CSTD memcpy(static_cast<char*>(_Ptr) + _Size, &_Dealloc, sizeof(_Dealloc));
                return _Ptr;
            } else {
                // _Alloc is statically specified
                using _Allocator = _Rebind_alloc_t<_Alloc, _Aligned_block>;
                _Allocator _Al{};

                if constexpr (allocator_traits<_Allocator>::is_always_equal::value) {
                    // allocator is stateless - do not store
                    const size_t _Count = (_Size + sizeof(_Aligned_block) - 1) / sizeof(_Aligned_block);
                    return _Al.allocate(_Count);
                } else {
                    // store stateful allocator
                    const size_t _Count =
                        (_Size + sizeof(_Allocator) + alignof(_Allocator) - 1 + sizeof(_Aligned_block) - 1)
                        / sizeof(_Aligned_block);
                    void* const _Ptr = _Al.allocate(_Count);
                    ::new (reinterpret_cast<void*>((reinterpret_cast<uintptr_t>(_Ptr) + _Size + alignof(_Allocator) - 1)
                                                   / alignof(_Allocator))) _Allocator{_STD move(_Al)};
                    return _Ptr;
                }
            }
        }

        // clang-format off
        static void operator delete(void* _Ptr, size_t _Size) noexcept {
            // clang-format on
            if constexpr (is_void_v<_Alloc>) {
                // use erased deallocator
                void (*_Dealloc)(void*, size_t);
                _CSTD memcpy(&_Dealloc, static_cast<const char*>(_Ptr) + _Size, sizeof(_Dealloc));
                _Dealloc(_Ptr, _Size);
            } else {
                using _Allocator = _Rebind_alloc_t<_Alloc, _Aligned_block>;
                if constexpr (allocator_traits<_Allocator>::is_always_equal::value) {
                    // stateless allocator - just make one!
                    _Allocator _Al{};
                    const size_t _Count = (_Size + sizeof(_Aligned_block) - 1) / sizeof(_Aligned_block);
                    _Al.deallocate(static_cast<_Aligned_block*>(_Ptr), _Count);
                } else {
                    // retrieve stateful allocator
                    auto& _Stored_al = *reinterpret_cast<_Allocator*>(
                        (reinterpret_cast<uintptr_t>(_Ptr) + _Size + alignof(_Allocator) - 1) / alignof(_Allocator));
                    _Allocator _Al{_STD move(_Stored_al)};
                    _Stored_al.~_Allocator();

                    _Size += sizeof(_Allocator) + alignof(_Allocator) - 1;
                    const size_t _Count = (_Size + sizeof(_Aligned_block) - 1) / sizeof(_Aligned_block);
                    _Al.deallocate(static_cast<_Aligned_block*>(_Ptr), _Count);
                }
            }
        }

        template <class _Alloc2, class... _Args>
            requires is_void_v<_Alloc> || convertible_to<const _Alloc&, _Alloc>
        static void* operator new(size_t _Size, allocator_arg_t, const _Alloc2& _Al2, _Args&...) {
            if constexpr (is_void_v<_Alloc>) {
                // type-erase the provided allocator
                using _Allocator = _Rebind_alloc_t<_Alloc2, _Aligned_block>;
                _Allocator _Al{_Al2};
                constexpr size_t _Align = alignof(decltype(_Al));

                void (*const _Dealloc)(void*, size_t) = [](void* _Block, size_t _Size) {
                    _Size += sizeof(void (*)(void*, size_t)) + _Align - 1;
                    const auto _Al_ptr = reinterpret_cast<const _Allocator*>(
                        (reinterpret_cast<uintptr_t>(_Block) + _Size) & (_Align - 1));
                    _Allocator _Al{*_Al_ptr};
                    _Al_ptr->~_Allocator();

                    const size_t _Count = (_Size + sizeof(_Al) + sizeof(_Aligned_block) - 1) / sizeof(_Aligned_block);
                    _Al.deallocate(static_cast<_Aligned_block*>(_Block), _Count);
                };

                const size_t _Count =
                    (_Size + sizeof(void (*)(void*, size_t)) + sizeof(_Al) + _Align - 1 + sizeof(_Aligned_block) - 1)
                    / sizeof(_Aligned_block);
                void* const _Ptr = _Al.allocate(_Count);
                _CSTD memcpy(static_cast<char*>(_Ptr) + _Size, &_Dealloc, sizeof(_Dealloc));
                ::new (reinterpret_cast<void*>(
                    (reinterpret_cast<uintptr_t>(_Ptr) + _Size + sizeof(void (*)(void*, size_t)) + _Align - 1)
                    & (_Align - 1))) _Allocator{_Al};
                return _Ptr;
            } else {
                // use statically specified allocator type
                using _Allocator = _Rebind_alloc_t<_Alloc, _Aligned_block>;
                _Allocator _Al{static_cast<_Alloc>(_Al2)};

                if constexpr (allocator_traits<_Allocator>::is_always_equal::value) {
                    // do not store stateless allocator
                    const size_t _Count = (_Size + sizeof(_Aligned_block) - 1) / sizeof(_Aligned_block);
                    return _Al.allocate(_Count);
                } else {
                    // store stateful allocator
                    constexpr size_t _Align = alignof(decltype(_Al));
                    const size_t _Count =
                        (_Size + sizeof(_Al) + _Align - 1 + sizeof(_Aligned_block) - 1) / sizeof(_Aligned_block);

                    void* const _Ptr   = _Al.allocate(_Count);
                    const auto _Al_ptr = reinterpret_cast<void*>(
                        (reinterpret_cast<uintptr_t>(_Ptr) + _Size + _Align - 1) & (_Align - 1));
                    ::new (_Al_ptr) _Allocator{_STD move(_Al)};
                    return _Ptr;
                }
            }
        }

        template <class _This, class _Alloc2, class... _Types>
        static void* operator new(size_t _Size, _This&, allocator_arg_t, const _Alloc2& _Al, _Types&... _Args) {
            return operator new(_Size, allocator_arg, _Al, _Args...);
        }
    };

    generator(const generator&) = delete;

    generator(generator&& _Right) noexcept : _Coro(_STD exchange(_Right._Coro, nullptr)) {}

    ~generator() {
        if (_Coro) {
            _Coro.destroy();
        }
    }

    generator& operator=(const generator&) = delete;

    generator& operator=(generator&& _Right) noexcept {
        _Coro = _STD exchange(_Right._Coro, nullptr);
        return *this;
    }

    _NODISCARD auto begin() {
        // Pre: _Coro is suspended at its initial suspend point
#ifndef _KERNEL_MODE
        _STL_ASSERT(_Coro, "Can't call begin on moved-from generator");
#endif // _KERNEL_MODE
        _Coro.resume();
        return _Iterator{_Coro};
    }

    _NODISCARD default_sentinel_t end() const noexcept {
        return default_sentinel;
    }

private:
    struct _Iterator {
        using difference_type = ptrdiff_t;
        using value_type      = _Ty;

        coroutine_handle<promise_type> _Coro = nullptr;

        _NODISCARD _Ref&& operator*() const noexcept {
#ifndef _KERNEL_MODE
            _STL_ASSERT(!_Coro.done(), "Can't dereference generator end iterator");
#endif // _KERNEL_MODE
            return static_cast<_Ref&&>(*_Coro.promise()._Ptr);
        }

        _Iterator& operator++() {
#ifndef _KERNEL_MODE
            _STL_ASSERT(!_Coro.done(), "Can't increment generator end iterator");
#endif // _KERNEL_MODE
            _Coro.resume();
            return *this;
        }

        void operator++(int) {
            ++*this;
        }

        _NODISCARD bool operator==(default_sentinel_t) const noexcept {
            return _Coro.done();
        }
    };

    explicit generator(coroutine_handle<promise_type> _Coro_) noexcept : _Coro(_Coro_) {}

    coroutine_handle<promise_type> _Coro = nullptr;
};

namespace ranges {
    template <class _Ty, class _Ref, class _Alloc>
    inline constexpr bool enable_view<generator<_Ty, _Ref, _Alloc>> = true;
}

_STD_END

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)

#endif // !_HAS_CXX23 || !defined(__cpp_lib_byte) || !defined(__cpp_impl_coroutine)
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _GENERATOR_
