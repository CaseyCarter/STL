// generator standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _GENERATOR_
#define _GENERATOR_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR

#if !_HAS_CXX23 || !defined(__cpp_lib_byte) || !defined(__cpp_impl_coroutine)
#pragma message("The contents of <generator> are available only in c++latest mode with coroutine and std::byte support")
#else // ^^^ no coroutine support / coroutines vvv

#include <coroutine>
#include <ranges>
#include <xmemory>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_STD_BEGIN

template <class _Ty>
using _Generator_ref_t = conditional_t<is_reference_v<_Ty>, _Ty, const _Ty&>;

template <class _Ty, class _Value = remove_cvref_t<_Ty>, class _Alloc = void>
// FIXME requires common_reference_with<_Generator_ref_t<_Ty> &&, Value&>
class generator {
public:
    class promise_type {
        add_pointer_t<_Generator_ref_t<_Ty>> _Ptr = nullptr;

        friend generator;

        void destruct_value_() const {}

    public:
        generator get_return_object() noexcept {
            return generator(coroutine_handle<promise_type>::from_promise(*this));
        }

        suspend_always initial_suspend() noexcept {
            return {};
        }

        suspend_always final_suspend() noexcept {
            return {};
        }

        suspend_always yield_value(const _Ty& _Val) noexcept {
            _Ptr = _STD addressof(_Val);
            return {};
        }

#if 1 // FIXME
#endif

        void await_transform() = delete;

        void return_void() noexcept {}

#ifndef _KERNEL_MODE
#ifdef _CPPUNWIND
        void unhandled_exception() {
            throw;
        }
#else // ^^^ defined(_CPPUNWIND) / !defined(_CPPUNWIND) vvv
        void unhandled_exception() noexcept {}
#endif // _CPPUNWIND
#endif // _KERNEL_MODE


#if 0 // FIXME
        using _Alloc_char = _Rebind_alloc_t<_Alloc, char>;
        static_assert(is_same_v<char*, typename allocator_traits<_Alloc_char>::pointer>,
            "generator does not support allocators with fancy pointer types");
        static_assert(allocator_traits<_Alloc_char>::is_always_equal::value && is_default_constructible_v<_Alloc_char>,
            "generator supports only stateless allocators");
#endif

        static void* operator new(size_t _Size) requires is_void_v<_Alloc> || default_initializable<_Alloc> {
            if constexpr (is_void_v<_Alloc>) {
                return allocator<byte>{}.allocate(_Size);
            } else {
                _Rebind_alloc<_Alloc, byte> _Al{};
                return _Al.allocate(_Size);
            }
        }

#if 0 // FIXME
        template <class _Alloc2, class... _Args>
        static void* operator new(size_t _Size, allocator_arg_t, _Alloc2& _Al, _Args&...);
        template <class _This, class _Alloc2, class... _Args>
        static void* operator new(size_t _Size, _This&, allocator_arg_t, _Alloc2& _Al, _Args&...);
#endif

        static void operator delete(
            void* const _Ptr, const size_t _Size) noexcept requires is_void_v<_Alloc> || default_initializable<_Alloc> {
            if constexpr (is_void_v<_Alloc>) {
                allocator<byte>{}.deallocate(static_cast<byte*>(_Ptr), _Size);
            } else {
                _Rebind_alloc<_Alloc, byte> _Al{};
                return _Al.deallocate(static_cast<byte*>(_Ptr), _Size);
            }
        }
    };

    generator(const generator&) = delete;

    generator(generator&& _Right) noexcept
        : _Coro(_STD exchange(_Right._Coro, {})), _Started(_STD exchange(_Right._Started, false)) {}

    ~generator() {
        if (_Started && !_Coro.done()) {
            _Coro.promise().destruct_value_();
        }
        _Coro.destroy();
    }

    generator& operator=(const generator&) = delete;

    generator& operator=(generator&& _Right) noexcept {
        _STD swap(_Coro, _Right._Coro);
        _STD swap(_Started, _Right._Started);
        return *this;
    }

    _NODISCARD auto begin() {
        _STL_ASSERT(_Coro, "Can't call begin on moved-from generator");
        _STL_ASSERT(!_Started, "Can't call generator::begin more than once");
        _Started = true;
        _Coro.resume();
        return _Iterator{_Coro};
    }

    _NODISCARD default_sentinel_t end() const noexcept {
        return {};
    }

private:
    struct _Iterator {
        using iterator_category = input_iterator_tag;
        using difference_type   = ptrdiff_t;
        using value_type        = _Ty;
        using reference         = const _Ty&;

        coroutine_handle<promise_type> _Coro;

        explicit _Iterator(coroutine_handle<promise_type> _Coro_) noexcept : _Coro(_Coro_) {}

        _NODISCARD reference operator*() const noexcept {
            return *_Coro.promise()._Value;
        }

        _Iterator& operator++() {
            _Coro.resume();
            if (_Coro.done()) {
                _Coro = nullptr;
            }

            return *this;
        }

        void operator++(int) {
            ++*this;
        }

        _NODISCARD bool operator==(const _Iterator& _Right) const noexcept = default;
    };

    explicit generator(coroutine_handle<promise_type> _Coro_) noexcept : _Coro(_Coro_) {}

    coroutine_handle<promise_type> _Coro = nullptr;
    bool _Started                        = false;
};

template <class _Ref, class _Value, class _Alloc>
inline constexpr bool ranges::enable_view<generator<_Ref, _Value, _Alloc>> = true;

_STD_END

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)

#endif // !_HAS_CXX23 || !defined(__cpp_lib_byte) || !defined(__cpp_impl_coroutine)
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _GENERATOR_
